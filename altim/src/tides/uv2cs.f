      program uv2cs

* Determine weights to be applied to orthoweights U and V in
* order to obtain classical tide components C and S.

      implicit none
      character*80 arg
      real*8	ct(30,2),st(30,2),rad,theta,pq(3)
      integer*4	k,l,m,n
      real*8	dpd(4)/13.1763965d0,0.9856473d0,0.1114041d0,0.0529539d0/,
     |		u00(2)/0.0298d0,0.0200d0/,u20(2)/0.1408d0,0.0905d0/,
     |		u21(2)/0.0805d0,0.0638d0/,u40(2)/0.6002d0,0.3476d0/,
     |		u41(2)/0.3025d0,0.1645d0/,v41(2)/0.1517d0,0.0923d0/
      integer*4 indx(30,2,4)					!(  l  ,m,n)
     | /-3,-3,-2,-2,-2,-2,-1,-1,-1,-1,-1, 0, 0, 0, 0,		!( 1:15,1,1)
     |   1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3,		!(16:30,1,1)
     |  -3,-3,-2,-2,-2,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0,		!( 1:15,2,1)
     |   0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3,		!(16:30,2,1)
     |   0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2,		!( 1:15,1,2)
     |  -3,-2,-2, 0, 0, 0, 1, 2,-2, 0, 0,-2, 0, 0, 0,		!(16:30,1,2)
     |   0, 2, 0, 2, 3,-1, 0, 0, 1, 2, 3,-2,-1, 0, 0,		!( 1:15,2,2)
     |   1,-2, 0, 0, 0,-3,-2,-1, 0, 0, 0, 0,-2, 0, 0,		!(16:30,2,2)
     |   2, 0, 1, 1,-1,-1, 0, 0, 0, 2, 0,-1, 1, 1,-1,		!( 1:15,1,3)
     |   0, 0, 0, 0, 0, 0, 0, 0, 1,-1,-1, 0,-2, 0, 0,		!(16:30,1,3)
     |   3, 1, 2, 0, 0, 1, 1, 1, 1,-1,-1, 2, 0, 0, 0,		!( 1:15,2,3)
     |   0, 1,-1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,-1,-1,		!(16:30,2,3)
     |   0, 0,-1, 0,-1, 0,-2,-1, 0, 0, 0, 0, 0, 1, 0,		!( 1:15,1,4)
     |   0,-1, 0,-1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1,		!(16:30,1,4)
     |   0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0,-1, 0,		!( 1:15,2,4)
     |   0, 0, 0, 0, 1, 0, 0, 0,-1, 0, 1, 2, 0, 0, 1/		!(16:30,2,4)
      real*8 amp(30,2)							!(  l  ,m)
     | /0.00663d0,0.00802d0,0.00947d0,0.05019d0,0.00180d0,0.00954d0,	!( 1: 6,1)
     |  0.00152d0,0.04946d0,0.26218d0,0.00171d0,0.00343d0,0.00741d0,	!( 7:12,1)
     |  0.02062d0,0.00414d0,0.00394d0,0.00713d0,0.00137d0,0.12200d0,	!(13:18,1)
     |  0.00730d0,0.36874d0,0.05002d0,0.00293d0,0.00524d0,0.00395d0,	!(19:24,1)
     |  0.02061d0,0.00409d0,0.00342d0,0.00169d0,0.01128d0,0.00723d0,	!(25:30,1)
     |  0.00180d0,0.00467d0,0.01601d0,0.01932d0,0.00130d0,0.00102d0,	!( 1: 6,2)
     |  0.00451d0,0.12100d0,0.00113d0,0.02298d0,0.00106d0,0.00190d0,	!( 7:12,2)
     |  0.00218d0,0.02358d0,0.63194d0,0.00193d0,0.00466d0,0.01786d0,	!(13:18,2)
     |  0.00447d0,0.00197d0,0.01718d0,0.29402d0,0.00305d0,0.00102d0,	!(19:24,2)
     |  0.07994d0,0.02382d0,0.00259d0,0.00086d0,0.00447d0,0.00195d0/	!(25:30,2)
      character*4 comp(30,2)
     | /'2Q1 ','SIG1','    ','Q1  ','    ','RHO1','    ','    ',	!( 1: 8,1)
     |  'O1  ','    ','T1  ','    ','M1  ','    ','CHI1','PI1 ',	!( 9:16,1)
     |  '    ','P1  ','    ','K1  ','    ','PSI1','PHI1','TT1 ',	!(17:24,1)
     |  'J1  ','    ','SO1 ','    ','OO1 ','    ',			!(25:30,1)
     |  '    ','    ','2N2 ','MU2 ','    ','    ','    ','N2  ',	!( 1: 8,2)
     |  '    ','NU2 ','    ','    ','    ','    ','M2  ','    ',	!( 9:16,2)
     |  'LAM2','L2  ','    ','    ','T2  ','S2  ','R2  ','    ',	!(17:24,2)
     |  'K2  ','    ','    ','    ','    ','    '/			!(25:30,2)
      save

* Initialize

      rad = datan(1d0)/45d0
      do m=1,2
         do l=1,30
            theta = m * (dpd(2)-dpd(1))
            do n=1,4
               theta = theta + indx(l,m,n)*dpd(n)
            enddo
            theta = 2d0*theta*rad
            ct(l,m) = 2d0*dcos(theta)
            st(l,m) = 2d0*dsin(theta)
         enddo
      enddo

* What tidal component?

      call getarg(1,arg)
      do m=1,2
         do l=1,30
	    if (comp(l,m).eq.arg) goto 100
	 enddo
      enddo
      stop "Tidal component not found"
100   continue

* Compute weights

      pq(1) = u00(m)
      pq(2) = u20(m) - u21(m)*ct(l,m)
      pq(3) = u40(m) - u41(m)*ct(l,m) + v41(m)*st(l,m)

* C or S?

      call getarg(2,arg)

      if (arg.eq.'C') then
         write (*,200) ('u',k,m,+(-1)**m*amp(l,m)*pq(k),k=1,3)
      else if (arg.eq.'S') then
         write (*,200) ('v',k,m,-(-1)**m*amp(l,m)*pq(k),k=1,3)
      else
         write (*,*) (amp(l,m)*pq(k),k=1,3)
      endif
200   format (3(2x,a,i1,i1,f12.8))
      end
