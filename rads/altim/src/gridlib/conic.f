C---------------------------------------------------------------
C
C  SET OF SUBROUTINES FOR THE USE OF CONIC PROJECTIONS
C
C     DELFT UNIVERSITY OF TECHNOLOGY
C     SECTION ORBITAL MECHANICS
C     WRITTEN BY R.C.A. ZANDBERGEN       -       NOVEMBER 1988
C
C  CONEDF(XLAM0,XLAM1,PHI0,PHI1,ERROR)
C     DEFINE CONIC PROJECTION
C  TOCONE(XLAM,PHI,X,Y)
C     CONVERT TO CONIC COORDINATES (=APPLY PROJECTION)
C  FRCONE(XLAM,PHI,X,Y,ERROR)
C     CONVERT FROM CONIC COORDINATES (=APPLY INVERSE PROJECTION)
C---------------------------------------------------------------
C
      SUBROUTINE CONEDF(XL0,XL1,PHI0,PHI1,X0,X1,Y0,Y1,ERROR)
C---------------------------------------------------------------
C
C     INITIALIZE CONIC PROJECTION.
C
C     XLAM0 AND XLAM1 GIVE MINIMUM AND MAXIMUM LONGITUDE.
C     PHI0 AND PHI1 GIVE MINIMUM AND MAXIMUM LATITUDE.
C     X0 AND X1 RETURN THE EXTREMES OF THE PROJECTED X VALUES
C     Y0 AND Y1 RETURN THE EXTREMES OF THE PROJECTED Y VALUES
C     ERROR IS LOGICAL WHICH RETURNS TRUE IF THE SETUP FAILED.
C     THIS PROCEDURE MUST BE CALLED FIRST OF ALL.
C
C---------------------------------------------------------------
C
      IMPLICIT REAL*4(A-H,O-Z)
      LOGICAL ERROR,DEFINE,SPOLE,WRAP
      COMMON /CONICS/ REFLAM,REFPHI,XSCALE,HALFA,YPOLE,
     .        RADMIN,RADMAX,REFRAD,RADDIR,SPOLE,DEFINE,WRAP
C
C     INITIALIZATION
C
      PI=3.1415926536
      RAD=PI/180.
      DEFINE=.FALSE.
      ERROR=.TRUE.
C
C     LATITUDES MUST BE -89 TO 89
C
      IF (PHI0.LT.-89. .OR. PHI0.GT.PHI1 .OR. PHI.GT.89.) THEN
        WRITE (*,*) 'CONEDF: ILLEGAL LATITUDE BOUNDARIES'
        RETURN
      ENDIF
C
C     LONGITUDES MAY BE (-180 TO 180) OR (0 TO 360)
C
      XLAM0=XL0
      XLAM1=XL1
      IF (XLAM0.LE.-180. .OR. XLAM0.GE.XLAM1) THEN
        WRITE (*,*) 'CONEDF: ILLEGAL LONGITUDE BOUNDARIES'
        RETURN
      ENDIF
C
C     CHECK IF 0-MERIDIAN IS CROSSED
C
      WRAP=(XLAM0.LT.0.)
      IF (WRAP .AND. XLAM1.GT.180.) THEN
        WRITE (*,*) 'CONEDF: ILLEGAL WRAPPED LONGITUDE BOUNDARIES'
        RETURN
      ENDIF
C
C     CHECK DIRECTION OF POLE
C
      CF0=COS(PHI0*RAD)
      CF1=COS(PHI1*RAD)
      IF (ABS(CF0-CF1).LT.1.D-4) THEN
        WRITE (*,*) 'CONEDF: CONIC PROJECTION NOT APPLICABLE'
        RETURN
      ELSE
        SPOLE=(CF0.LT.CF1)
      ENDIF
C
C     COMPUTE CONVERSION FACTORS
C
      REFLAM=(XLAM1+XLAM0)*0.5
      REFPHI=(PHI1+PHI0)*0.5
      WIDTH=XLAM1-XLAM0
      HEIGHT=PHI1-PHI0
C
      TOPANG=ABS(CF1-CF0)*WIDTH/HEIGHT
      XSCALE=WIDTH/TOPANG
      HALFA=TOPANG*0.5
C
      RADMAX=WIDTH*AMAX1(CF0,CF1)/TOPANG
      RADMIN=RADMAX-HEIGHT
      IF (SPOLE) THEN
        RADDIR=1.
      ELSE
        RADDIR=-1.
      ENDIF
      REFRAD=(RADMIN+RADMAX)*0.5
      YPOLE=-REFRAD*RADDIR
C
      X1=RADMAX*SIN(HALFA)
      X0=-X1
C
      DELY=RADMAX-RADMIN*COS(HALFA)
      IF (SPOLE) THEN
        Y1=HEIGHT*0.5
        Y0=Y1-DELY
      ELSE
        Y0=-HEIGHT*0.5
        Y1=Y0+DELY
      ENDIF
      ERROR=.FALSE.
      DEFINE=.TRUE.
      RETURN
      END
C
      SUBROUTINE FRCONE(XLAM,PHI,X,Y,ERROR)
C---------------------------------------------------------------
C
C     CONVERT FROM X,Y TO XLAM,PHI.
C     IF RESULT WOULD BE OUTSIDE AREA ERROR IS TRUE.
C     ERROR ALSO TRUE IF NOT INITIALIZED.
C
C---------------------------------------------------------------
C
      IMPLICIT REAL*4(A-H,O-Z)
      LOGICAL ERROR,DEFINE,SPOLE
      COMMON /CONICS/ REFLAM,REFPHI,XSCALE,HALFA,YPOLE,
     .        RADMIN,RADMAX,REFRAD,RADDIR,SPOLE,DEFINE,WRAP
C
      ERROR=.TRUE.
      IF (.NOT.DEFINE) THEN
        WRITE (*,*) 'FRCONE: PROJECTION NOT INITIALIZED'
        RETURN
      ENDIF
C
      YDIST=ABS(Y-YPOLE)
      RADIUS=SQRT(X*X+YDIST*YDIST)
C
C     RETURN WITH ERROR SET IF OUTSIZE LATITUDE RANGE
C
      IF (RADIUS.LT.RADMIN .OR. RADIUS.GT.RADMAX) RETURN
C
      ALPHA=ATAN2(X,YDIST)
C
C     RETURN WITH ERROR SET IF OUTSIDE LONGITUDE RANGE
C
      IF (ABS(ALPHA) .GT. HALFA) RETURN
C
      XLAM=ALPHA*XSCALE+REFLAM
      PHI=(RADIUS-REFRAD)*RADDIR+REFPHI
C
      ERROR=.FALSE.
      RETURN
      END
C
      SUBROUTINE TOCONE(XL,PHI,X,Y,ERROR)
C---------------------------------------------------------------
C
C     CONVERT RECTANGULAR COORDINATES TO CONIC.
C     ERROR RETURNS TRUE IF NOT INITIALIZED OR THE REQUESTED
C     COORDINATES ARE OUTSIDE THE DEFINED AERA.
C
C---------------------------------------------------------------
C
      IMPLICIT REAL*4(A-H,O-Z)
      LOGICAL ERROR,DEFINE,SPOLE,WRAP
      COMMON /CONICS/ REFLAM,REFPHI,XSCALE,HALFA,YPOLE,
     .        RADMIN,RADMAX,REFRAD,RADDIR,SPOLE,DEFINE,WRAP
C
      ERROR=.TRUE.
      IF (.NOT.DEFINE) THEN
        WRITE (*,*) 'TOCONE: PROJECTION NOT INITIALIZED'
        RETURN
      ENDIF
C
      XLAM=XL
      IF (WRAP) THEN
        IF (XLAM.GT.180.) XLAM=XLAM-360.
      ELSE
        IF (XLAM.LT.0.) XLAM=XLAM+360.
      ENDIF
C
      ALPHA=(XLAM-REFLAM)/XSCALE
      IF (ABS(ALPHA).GT.HALFA) RETURN
      RADIUS=ABS((PHI-REFPHI)-YPOLE)
      IF (RADIUS.LT.RADMIN .OR. RADIUS.GT.RADMAX) RETURN
      X=RADIUS*SIN(ALPHA)
      Y=YPOLE+RADDIR*RADIUS*COS(ALPHA)
C
      ERROR=.FALSE.
      RETURN
      END
C
      BLOCK DATA
C---------------------------------------------------------------
C     SET UP DEFAULT VALUES
C---------------------------------------------------------------
      IMPLICIT REAL*4(A-H,O-Z)
      LOGICAL DEFINE,SPOLE
      COMMON /CONICS/ REFLAM,REFPHI,TOPANG,HALFA,YPOLE,
     .        RADMIN,RADMAX,REFRAD,RADDIR,SPOLE,DEFINE,WRAP
C
      DATA DEFINE/.FALSE./
      END
